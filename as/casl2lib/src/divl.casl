;;; 0〜65535の範囲にある正数の割算（筆算方式）を行う
;;; 入力 GR1:被除数 GR2:除数
;;; 出力 GR0:商 GR3:剰余
;;; (GR2 = 0)の場合、GR0 GR3とも0になり、オーバーフロー
DIVL    START
        PUSH    0,GR1
        PUSH    0,GR2
        PUSH    0,GR4
        XOR     GR0,GR0         ; GR0:商 初期化
        XOR     GR3,GR3         ; GR3:剰余 初期化
        AND     GR2,GR2         ; (GR2 = 0)の場合、DIVZEROへジャンプ
        JZE     DIVZERO         ; ↓
        AND     GR1,GR1         ; (GR1 = 0)の場合、FINへジャンプ
        JZE     FIN             ; ↓
        ST      GR2,Y           ; YにGR2の初期値を保存
        LAD     GR4,1           ; GR4:対象ビットのインデックス 初期化
SL      CPL     GR2,GR1         ; ループ先頭。(GR2 > GR1)の場合、LOOPへループ脱出
        JPL     LOOP            ; ↓
        SLL     GR4,1           ; GR4を1回左シフト
        ST      GR2,TMP         ; GR2の値をTMPに退避
        SLL     GR2,1           ; GR2を1回左シフト
        JOV     YOV             ; オーバーフローの場合は、YOVへジャンプ
        JUMP    SL              ; ループ終端
YOV     LD      GR2,TMP         ; GR2の値をTMPから復元
        SRL     GR4,1           ; GR4を1回右シフト
        JUMP    LPIN            ; LPINへジャンプ
LOOP    SRL     GR4,1           ; ループ先頭。GR4を1回右シフト
        JZE     SETMOD          ; (GR4 = 0)の場合、SETMODへループ脱出
        SRL     GR2,1           ; GR2を1回右シフト
        CPL     GR1,Y           ; (GR1 < Y)の場合、SETMODへループ脱出
        JMI     SETMOD          ; ↓
        CPL     GR1,GR2         ; (GR1 < GR2)の場合、ループ先頭へジャンプ
        JMI     LOOP            ; ↓
LPIN    SUBL    GR1,GR2         ; GR1 <- GR1 - GR2
        ADDL    GR0,GR4         ; GR0 <- GR0 + GR4
        JUMP    LOOP            ; ループ終端
DIVZERO LAD     GR3,#8000       ; 強制的にオーバーフローを発生させ、GR3 <- 0
        SLL     GR3,1           ; ↓
        JUMP    FIN             ; FIN へジャンプ
SETMOD  LD      GR3,GR1         ; GR3 <- GR1。剰余の設定
FIN     POP     GR4
        POP     GR2
        POP     GR1
        RET
Y       DS      1
TMP     DS      1
        END
