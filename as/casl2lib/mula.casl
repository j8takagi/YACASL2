;;; -32767〜32767の範囲にある正数のかけ算（筆算方式）を行う
;;; 入力 GR1:被乗数 GR2:乗数
;;; 出力 GR0:積
;;; 被乗数または乗数が-32768の場合は、オーバーフロー
;;; 積が-32767未満または32767より大きい場合は、GR0は積の下位16ビットになり、オーバーフロー
MULA    START
        RPUSH
        XOR     GR0,GR0         ; 積
        AND     GR1,GR1         ; (GR1 = 0)の場合、終了
        JZE     FIN             ; ↓
        AND     GR2,GR2         ; (GR2 = 0)の場合、終了
        JZE     FIN             ; ↓
        LAD     GR3,1           ; 対象ビット
        XOR     GR4,GR4         ; マイナスフラグ
CHK1    AND     GR1,GR1         ; (GR1 > 0)の場合は、CHK2へジャンプ
        JPL     CHK2            ; ↓
        XOR     GR1,ALLON       ; GR1の正負を反転
        ADDA    GR1,ONE         ; ↓
        JOV     FIN             ; (GR1 = -32768)の場合は終了
        XOR     GR4,ONE         ; GR4 <- 1
CHK2    AND     GR2,GR2         ; (GR1 > 0)の場合は、LOOPへジャンプ
        JPL     MUL             ; ↓
        XOR     GR2,ALLON       ; GR2の正負を反転
        ADDA    GR2,ONE         ; ↓
        JOV     FIN             ; (GR2 = -32768)の場合は終了
        XOR     GR4,ONE         ; マイナスフラグを反転
MUL     CALL    MULL            ; GR0 <- GR1 * GR2
        JOV     FIN
        AND     GR0,GR0
        JMI     OV
MIN     AND     GR4,GR4         ; マイナスフラグがオフの場合、終了
        JZE     FIN             ; ↓
        XOR     GR0,ALLON       ; GR1の正負を反転
        ADDA    GR0,ONE         ; ↓
        JUMP    FIN
OV      ADDL    GR0,=#8000
FIN     RPOP
        RET
ONE     DC      1
ALLON   DC      #FFFF
        END
;;; 0〜65535の範囲にある正数のかけ算（筆算方式）を行う
;;; 入力 GR1:被乗数 GR2:乗数
;;; 出力 GR3:積
;;; 積が65535より大きい場合は、オーバーフロー
MULL    START
        XOR     GR3,GR3         ; GR3の初期化
        AND     GR1,GR1         ; GR1 = 0 の場合、FINへジャンプ
        JZE     FIN             ; ↓
        AND     GR2,GR2         ; GR2 = 0 の場合、FINへジャンプ
        JZE     FIN             ; ↓
        PUSH    0,GR1           ; GR1の退避
        PUSH    0,GR2           ; GR2の退避
LOOP    SRL     GR2,1           ; ループ開始。SRLを1つ右シフト
        JOV     ON              ; 乗数の最下位ビットが1の場合、ONへジャンプ
        JUMP    NEXT            ; NEXTへジャンプ
ON      ADDL    GR3,GR1         ; GR3 <- GR3 + GR1
        JOV     POST            ; GR3がオーバーフローした場合、POSTへジャンプ
NEXT    AND     GR2,GR2         ; GR2 = 0 の場合、POSTへジャンプ
        JZE     POST            ; ↓
        SLL     GR1,1           ; GR1を1つ左シフト
        JOV     POST            ; GR1がオーバーフローした場合、POSTへジャンプ
        JUMP    LOOP            ; ループ終端
POST    POP     GR2             ; GR2の復元
        POP     GR1             ; GR1の復元
FIN     RET
        END
