;;; *** This file is auto generated from inl_main.casl ../mull.casl of src_inl ***
;;; 0〜65535の範囲にある整数の入力を受け付ける
;;; 入力 （SVC）
;;; 出力 GR1: 入力された数値 GR0: 文字の長さ。入力が数字以外の場合は、#FFFF
;;;      65536以上の正数が入力された場合はエラー
INL     START
        PUSH    0,GR2
        PUSH    0,GR3
        PUSH    0,GR4
        IN      IBUF,ILEN       ; 入力文字列を格納
        LD      GR0,ILEN        ; ILEN = 0の場合、FINへジャンプ
        JZE     FIN             ; ↓
        XOR     GR1,GR1         ; GR1:各桁の数値 初期化
        LAD     GR2,10          ; GR2:10進数の「10」 初期化
        LAD     GR3,0           ; GR3:値の一時格納 初期化
        LAD     GR4,0           ; GR4:インデックス 初期化
STOL    CPL     GR4,ILEN        ; ループ先頭。(GR4 = ILEN)の場合、ループ脱出
        JZE     CP              ; ↓
        LD      GR1,IBUF,GR4    ; GR1に、入力文字列中の次の桁を格納
        CPL     GR1,ZERO        ; (GR1 < '0')の場合、NANへジャンプ
        JMI     NAN              ; ↓
        CPL     GR1,NINE        ; (GR1 > '9')の場合、NANへジャンプ
        JPL     NAN              ; ↓
        SUBL    GR1,ZERO        ; GR1の文字を、対応する数値に変換
        ST      GR4,NLEN        ; GR4 <- ILEN - NLEN - 1
        LD      GR4,ILEN        ; ↓
        SUBA    GR4,NLEN        ; ↓
MUL10   CPA     GR4,=1          ; ループ先頭。GR1 <- 10 ** GR4
        JZE     NEXT            ; (GR4 = 1)の場合、ループ脱出
        JMI     NEXT            ; ↓
        CALL    MULL            ; MULLを呼び出し、GR0 <- GR1 * GR2
        JOV     FIN             ; ↓
        LD      GR1,GR0         ; GR1 <- GR0
        LAD     GR4,-1,GR4      ; GR4 <- GR4 -1
        JUMP    MUL10           ; ループ終端
NEXT    LD      GR4,NLEN        ; GR4 <- NLEN。復元
        ADDL    GR3,GR1         ; GR3 <- GR3 + GR1
        JOV     FIN             ; ↓
        LAD     GR4,1,GR4       ; GR4 <- GR4 + 1
        JUMP    STOL            ; ループ終端
NAN     LAD     GR0,#FFFF       ; GR0 <- #FFFF
        JUMP    FIN             ; FINへジャンプ
CP      LD      GR1,GR3         ; GR0 <- GR3
        LD      GR0,ILEN        ; GR0 <- ILEN
FIN     POP     GR4
        POP     GR3
        POP     GR2
        RET
ZERO    DC      '0'
NINE    DC      '9'
IBUF    DS      5
ILEN    DS      1
NLEN    DS      1
        END

;;; 0〜65535の範囲にある正数のかけ算（筆算方式）を行う
;;; 入力 GR1:被乗数 GR2:乗数
;;; 出力 GR0:積
;;; 積が65535より大きい場合は、GR0は積の下位16ビットになり、オーバーフロー
MULL    START
        PUSH    0,GR1
        PUSH    0,GR3
        XOR     GR0,GR0         ; 積
        AND     GR1,GR1         ; (GR1 = 0)の場合、終了
        JZE     FIN             ; ↓
        AND     GR2,GR2         ; (GR2 = 0)の場合、終了
        JZE     FIN             ; ↓
        LAD     GR3,1           ; 対象ビット
LOOP    PUSH    0,GR3           ; ループ先頭。GR2のビット中でGR3が示すビットが0の場合、NEXTへジャンプ
        AND     GR3,GR2         ; ↓
        POP     GR3             ; ↓
        JZE     NEXT            ; ↓
        ADDL    GR0,GR1         ; GR0 <- GR0 + GR1
        JOV     FIN             ; GR0がオーバーフローした場合、ループ脱出
NEXT    SLL     GR3,1           ; GR3を1回左シフト
        AND     GR3,GR3         ; (GR3 = 0)の場合、ループ脱出
        JZE     FIN             ; ↓
        CPL     GR3,GR2         ; (GR3 > GR2)の場合、ループ脱出
        JPL     FIN             ; ↓
        SLL     GR1,1           ; GR1を1回左シフト
        JOV     FIN             ; GR1がオーバーフローした場合、ループ脱出
        JUMP    LOOP            ; ループ終端
FIN     POP     GR3
        POP     GR1
        RET
        END
