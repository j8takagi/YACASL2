;;; GR1に格納された値を文字列に変換してメモリに格納。
;;; GR2に文字列の先頭アドレス、GR3に文字列の長さを返す
;;; 依存プログラム: DIVL, REV
L2STR   START
        PUSH    0,GR1
        PUSH    0,GR4
        XOR     GR0,GR0         ; GR0 <- 0
        LD      GR4,GR2         ; GR4 <- GR2
        AND     GR1,GR1         ; GR1をテスト
        JZE     ZERO            ; GR1が0の場合、ZEROにジャンプ
        PUSH    0,GR2
STI     CPL     GR1,GR2         ; ループ先頭。(GR1 < GR2)の場合は、ループ脱出
        JMI     STLST           ; ↓
        LAD     GR2,10          ; GR2に10進数の「10」を格納。
        CALL    DIVL            ; GR1とGR2の、商をGR0、剰余をGR3に格納
        LD      GR1,GR3         ; GR1にGR3をコピー
        LD      GR1,NCHAR,GR1   ; GR1を文字に変換
        ST      GR1,0,GR4       ; (GR4) <- GR1
        LAD     GR4,1,GR4       ; GR4 <- GR4 + 1
        LD      GR1,GR0         ; GR0をGR1にコピー
        JUMP    STI             ; ループ終端
STLST   POP     GR2
        LD      GR1,NCHAR,GR1   ; GR1を文字に変換
        ST      GR1,0,GR4       ; (GR4) <- GR1
        LAD     GR4,1,GR4       ; GR4 <- GR4 + 1
        JUMP    PRT             ; PRTにジャンプ
ZERO    LD      GR1,NCHAR       ; 「0」をSTR領域に格納
        ST      GR1,0,GR4       ; ↓ (GR4) <- GR1
        LAD     GR4,1,GR4       ; ↓ GR4 <- GR4 + 1
PRT     LD      GR1,GR2         ; GR1に文字列のアドレスを格納
        SUBL    GR4,GR2         ; GR2 <- GR4 - GR2
        LD      GR2,GR4         ; ↓
        CALL    REV             ; 文字列を逆順に並べ替え
        LD      GR3,GR2         ; GR3に文字列の長さを格納
        LD      GR2,GR4         ; GR2に文字列のアドレスを格納
        POP     GR4
        POP     GR1
        RET
LEN     DS      1
NCHAR   DC      '0123456789'
        END
