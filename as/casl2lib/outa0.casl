;;; GR1に格納された値を、10進数の整数値（-32768〜32767）として表示
OUTA    START
        RPUSH
        LAD     GR2,10          ; GR2に10進数の「10」を格納。
        LAD     GR0,0           ; GR0 <- 0
        LAD     GR4,0           ; 負数フラグ。GR1が負数の場合、GR4は1
        ST      GR0,LEN         ; LENの初期化
        AND     GR1,GR1         ; GR1をテスト
        JZE     ZPRT            ; GR1が0の場合、ZPRTにジャンプ
        JPL     STI             ; GR1が正数の場合、STIにジャンプ
        LAD     GR4,1           ; GR1が負数の場合、GR4をオン
        CALL    OABS            ;                  GR1を正数に変換
STI     CPL     GR1,GR2         ; ループ先頭。(GR1 < GR2)の場合は、ループ脱出
        JMI     STLST           ; ↓
        CALL    ODIVL           ; GR1とGR2の、商をGR0、剰余をGR3に格納
        LD      GR1,GR3         ; GR1にGR3をコピー
        LD      GR1,NCHAR,GR1   ; GR1を文字に変換
        CALL    STSTR           ; GR1をSTR領域に格納
        LD      GR1,GR0         ; GR0をGR1にコピー
        JUMP    STI             ; ループ終端
STLST   LD      GR1,NCHAR,GR1   ; GR1を文字に変換
        CALL    STSTR           ; GR1をSTR領域に格納
        AND     GR4,GR4         ; 正数の場合
        JZE     PRT             ; ↓
        LD      GR1,='-'        ; 負数の場合、「-」をSTR領域に格納
        CALL    STSTR           ; ↓
        JUMP    PRT             ; PRTにジャンプ
ZPRT    LD      GR1,NCHAR       ; 「0」をSTR領域に格納
        CALL    STSTR           ; ↓
PRT     LD      GR2,LEN         ; GR2にLENの値を格納
        LAD     GR1,STR         ; GR1に文字列のアドレスを格納
        CALL    REV             ; 文字列を逆順に並べ替え
        OUT     STR,LEN         ; 文字列を出力
        RPOP
        RET
STR     DS      17
LEN     DS      1
NCHAR   DC      '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'
        END
;; GR1をSTR領域に格納し、LENをインクリメント
STSTR   START
        PUSH    0,GR1
        PUSH    0,GR2
        LD      GR2,LEN         ; GR2にLENの値をロード
        ST      GR1,STR,GR2     ; STR+GR2 <- GR1
        LAD     GR2,1,GR2       ; GR2 <- GR2 + 1
        ST      GR2,LEN         ; LENにGR2を格納
        POP     GR2
        POP     GR1
        RET
        END
;;; GR1の値とGR2の値の、商をGR0、剰余をGR3に格納する
;;; 0〜65535の範囲の数値を扱う
ODIVL   START
        PUSH    0,GR1
        AND     GR2,GR2         ; (GR2 = 0)の場合、ODYZへジャンプ
        JZE     ODYZ            ; ↓
        LAD     GR0,0           ; GR0を初期化
        LD      GR3,GR1         ; GR3 <- GR1
ODLOOP  CPL     GR3,GR2         ; ループ先頭。(GR3 < GR2)の場合、終了
        JMI     ODFIN           ; ↓
        SUBL    GR3,GR2         ; GR3 <- GR3 - GR2
        ADDL    GR0,ODONE       ; ↓
        JUMP    ODLOOP          ; ループ終端
ODYZ    LAD     GR3,#FFFF       ; 強制的にオーバーフローを発生させ、GR3 <- 0
        ADDL    GR3,=1          ; ↓
        JUMP    ODFIN           ; ODFINへジャンプ
ODFIN   POP     GR1
        RET
ODONE   DC      1        
        END
;; アドレスがGR1、長さがGR2の文字列を逆順に並べ替える
;; 例: 12345 -> 54321、54321- -> -12345
REV     START
        RPUSH
        LAD     GR3,0           ; GR3の初期化
RPU     CPL     GR3,GR2         ; ループ先頭。(GR3 = GR2)の場合、ループ脱出
        JZE     RNEXT           ; ↓
        LD      GR4,GR1         ; GR4にGR1の値をコピー
        ADDL    GR4,GR3         ; GR4 <- GR4 + GR3
        LD      GR5,0,GR4       ; GR5にアドレスGR4の値を格納
        PUSH    0,GR5           ; GR5をプッシュ
        LAD     GR3,1,GR3       ; GR3 <- GR3 + 1
        JUMP    RPU             ; ループ終端
RNEXT   LAD     GR3,0           ; GR3の初期化
RPO     CPL     GR3,GR2         ; ループ先頭。(GR3 = GR2)の場合、ループ脱出
        JZE     RFIN            ; ↓
        POP     GR5             ; GR5にポップ
        LD      GR4,GR1         ; GR4にGR1の値をコピー
        ADDL    GR4,GR3         ; GR4 <- GR4 + GR3
        ST      GR5,0,GR4       ; アドレスGR4にGR5の値を格納
        LAD     GR3,1,GR3       ; GR3 <- GR3 + 1
        JUMP    RPO             ; ループ終端
RFIN    RPOP
        RET
        END
;; GR1の値を絶対値に変換する。GR1にはマイナスの数値が格納されていると想定。
;; 例: -10 -> 10, -20 -> 20
OABS    START
        XOR     GR1,=#FFFF      ; GR1の値を反転
        LAD     GR1,1,GR1       ; GR1 <- GR1 + 1
        RET
        END
